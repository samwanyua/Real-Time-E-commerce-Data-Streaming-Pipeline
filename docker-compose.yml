# version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper_ecommerce
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  broker:
    image: confluentinc/cp-kafka:7.4.0
    hostname: broker
    container_name: broker_ecommerce
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 200000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 200000000
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:latest
    container_name: postgres_ecommerce
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: es-container
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ports:
      - 9200:9200

  kibana:
    container_name: kb-container
    image: docker.elastic.co/kibana/kibana:8.11.1
    environment:
      - ELASTICSEARCH_HOSTS=http://es-container:9200
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601

  jobmanager:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flink-jobmanager
    ports:
      - "8081:8081"  # Flink Web UI
      - "6123:6123"  # RPC port
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - "FLINK_PROPERTIES=jobmanager.rpc.address: jobmanager"
      - "taskmanager.numberOfTaskSlots=2"
    volumes:
      - ./jars:/opt/flink/jars
      - ./flink_job.py:/opt/flink/flink_job.py
    entrypoint: /opt/flink/bin/jobmanager.sh start-foreground

  flink-submit:
    image: flink:1.17
    depends_on:
      - jobmanager
    volumes:
      - ./jars:/opt/flink/jars
      - ./flink_job.py:/opt/flink/flink_job.py
    entrypoint: >
      /bin/bash -c "
        echo 'Waiting for Flink JobManager to be ready...';
        while ! nc -z jobmanager 6123; do sleep 2; done;
        echo 'Submitting Flink job...';
        flink run -py /opt/flink/flink_job.py --pythonFiles /opt/flink/flink_job.py --jarfile /opt/flink/jars/flink-connector-kafka-1.17.1.jar --jarfile /opt/flink/jars/flink-connector-jdbc-1.17.1.jar --jarfile /opt/flink/jars/postgresql-42.7.3.jar      "

  taskmanager:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flink-taskmanager
    command: taskmanager
    depends_on:
      - jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - "FLINK_PROPERTIES=jobmanager.rpc.address: jobmanager"
      - "taskmanager.numberOfTaskSlots=2"

    volumes:
      - ./jars:/opt/flink/jars

  producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    container_name: kafka-producer
    depends_on:
      broker:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    command: python3 /app/main.py


volumes:
  pg_data:

networks:
  default:
    name: flink-net

